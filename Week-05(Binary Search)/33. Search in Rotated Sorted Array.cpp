class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0;                      // left pointer
        int h = nums.size() - 1;        // right pointer
        int ans = -1;                   // ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶™‡¶æ‡¶á ‡¶§‡¶¨‡ßá -1 return ‡¶ï‡¶∞‡¶¨

        while (l <= h) {
            int mid = (l + h) / 2;      // middle index ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ

            if (nums[mid] == target)    // ‚úÖ ‡¶Ø‡¶¶‡¶ø target mid ‡¶è ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶Ø‡¶æ‡ßü
                return mid;             // index return ‡¶ï‡¶∞‡ßá ‡¶¶‡¶æ‡¶ì

            // üëâ ‡¶Ø‡¶¶‡¶ø left side unsorted ‡¶π‡ßü (‡¶Æ‡¶æ‡¶®‡ßá nums[l] > nums[mid])
            else if (nums[l] > nums[mid]) {
                // ‡¶§‡¶æ‡¶π‡¶≤‡ßá right half ‡¶ü‡¶æ sorted
                // check ‡¶ï‡¶∞‡¶ø target ‡¶ï‡¶ø ‡¶è‡¶á sorted ‡¶Ö‡¶Ç‡¶∂‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
                if (nums[mid] <= target && target <= nums[h]) {
                    l = mid + 1;        // target right half ‡¶è ‚Üí search ‡¶°‡¶æ‡¶® ‡¶¶‡¶ø‡¶ï‡ßá
                }
                else {
                    h = mid - 1;        // target right half ‡¶è ‡¶®‡¶æ‡¶á ‚Üí search ‡¶¨‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶ï‡ßá
                }
            }

            // üëâ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶•‡¶æ‡ßü (nums[l] <= nums[mid]) ‚Üí left half sorted
            else {
                // check ‡¶ï‡¶∞‡¶ø target ‡¶ï‡¶ø ‡¶è‡¶á left half ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
                if (nums[l] <= target && target <= nums[mid]) {
                    h = mid - 1;        // target left half ‡¶è ‚Üí search ‡¶¨‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶ï‡ßá
                }
                else {
                    l = mid + 1;        // target left half ‡¶è ‡¶®‡¶æ‡¶á ‚Üí search ‡¶°‡¶æ‡¶® ‡¶¶‡¶ø‡¶ï‡ßá
                }
            }
        }

        return ans;  // target ‡¶®‡¶æ ‡¶™‡ßá‡¶≤‡ßá -1 return ‡¶π‡¶¨‡ßá
    }
};
