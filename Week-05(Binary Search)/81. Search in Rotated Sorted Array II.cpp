class Solution {
public:
    bool search(vector<int>& nums, int target) {
        bool ans = false;               // ‡¶∂‡ßá‡¶∑‡ßá true/false ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶π‡¶¨‡ßá
        int l = 0;                      // left pointer
        int h = nums.size() - 1;        // right pointer

        while (l <= h) {

            // üëâ duplicate skip ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
            while (l < h && (nums[l] == nums[h])) {
                // ‡¶Ø‡¶¶‡¶ø target ‡¶è‡¶á duplicate ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶Ø‡¶æ‡ßü
                if (nums[l] == target || nums[h] == target) {
                    ans = true;
                    break;              // ‡¶¨‡ßá‡¶∞ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶á
                }
                l++;                    // left ‡¶¨‡¶æ‡ßú‡¶æ‡¶ì
                h--;                    // right ‡¶ï‡¶Æ‡¶æ‡¶ì
            }

            int mid = (l + h) / 2;      // mid ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ

            if (nums[mid] == target) {  // ‚úÖ ‡¶Ø‡¶¶‡¶ø mid ‡¶è target ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶Ø‡¶æ‡ßü
                ans = true;
                break;
            }

            // üëâ check ‡¶ï‡¶∞‡¶ø ‡¶ï‡ßã‡¶® half sorted
            else if (nums[l] > nums[mid]) {
                // Right half sorted
                if (nums[mid] <= target && target <= nums[h]) {
                    l = mid + 1;        // target ‡¶°‡¶æ‡¶®‡ßá ‡¶Ü‡¶õ‡ßá
                } else {
                    h = mid - 1;        // target ‡¶¨‡¶æ‡¶Æ‡ßá ‡¶Ü‡¶õ‡ßá
                }
            } else {
                // Left half sorted
                if (nums[l] <= target && target <= nums[mid]) {
                    h = mid - 1;        // target ‡¶¨‡¶æ‡¶Æ‡ßá ‡¶Ü‡¶õ‡ßá
                } else {
                    l = mid + 1;        // target ‡¶°‡¶æ‡¶®‡ßá ‡¶Ü‡¶õ‡ßá
                }
            }
        }

        if (ans) return true;           // ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶≤‡ßá true
        else return false;              // ‡¶®‡¶æ ‡¶™‡ßá‡¶≤‡ßá false
    }
};
