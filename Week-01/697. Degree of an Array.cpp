/*‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá **notes** ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá ‡¶¶‡¶ø‡¶≤‡¶æ‡¶Æ:

---

### üîπ Problem:

Find the length of the **shortest subarray** having the same **degree** as the full array.

---

### üîπ Key Concepts:

* **Degree of array** = ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö frequency
* ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ degree ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
* ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ first ‡¶ì last index ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ø‡ßá‡¶á subarray ‡¶õ‡ßã‡¶ü, ‡¶∏‡ßá‡¶ü‡¶æ‡¶á ‡¶â‡¶§‡ßç‡¶§‡¶∞

---

### üîπ Steps:

1. Use 3 hash maps:

   * `freq[num]` ‚Üí ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶§‡¶¨‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá‡¶õ‡ßá
   * `first[num]` ‚Üí ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶ï‡ßã‡¶•‡¶æ‡ßü ‡¶è‡¶∏‡ßá‡¶õ‡ßá
   * `last[num]` ‚Üí ‡¶∂‡ßá‡¶∑ ‡¶ï‡ßã‡¶•‡¶æ‡ßü ‡¶è‡¶∏‡ßá‡¶õ‡ßá

2. Loop ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶¨ info collect ‡¶ï‡¶∞‡ßã

3. Find `max_freq` = degree of array

4. ‡¶Ø‡ßá‡¶∏‡¶¨ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ frequency == degree:

   * ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ subarray length ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßã ‚Üí `last[num] - first[num] + 1`
   * ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ø‡ßá‡¶ü‡¶æ smallest, ‡¶∏‡ßá‡¶ü‡¶æ‡¶á answer

---

### üîπ Time Complexity:

**O(n)** ‚Äì ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á ‡¶™‡ßÅ‡¶∞‡ßã array traverse ‡¶ï‡¶∞‡ßã

---

‡¶è‡¶á ‡¶õ‡ßã‡¶ü version ‡¶ü‡¶æ ‡¶§‡ßÅ‡¶Æ‡¶ø notebook ‡¶¨‡¶æ cheat sheet-‡¶è ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã üìí‚úÖ
‡¶Ü‡¶∞‡¶ì ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶¨‡¶≤‡ßã!
*/


class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        unordered_map<int, int> hash_map;
        unordered_map<int, int> first_seen;
        unordered_map<int, int> last_seen;
        for( int i = 0; i < nums.size(); i++){
            hash_map[nums[i]]++;
            if(first_seen.find(nums[i]) == first_seen.end()){
                first_seen[nums[i]] = i;
            }
            last_seen[nums[i]] = i;
        }
        int max_freq = 0;
        for(auto& u:hash_map){
            if(u.second > max_freq){
                max_freq = u.second;
            }
        }
        int min_length = INT_MAX;
        for( auto& p:hash_map){
            if(p.second == max_freq){
                int len = last_seen[p.first] - first_seen[p.first] + 1;
                min_length = min(min_length, len);
            }
        }
        return min_length;
    }
};